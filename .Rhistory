legend("topleft", c("Total US", "Los Angeles", "San Diego"),
pch=22, bty="n",col=c("blue", "red", "green"),
cex=0.7 )
# add a legend #
# the `lwd=` argument controls how thick the lines are
legend("topleft", c("Total US", "Los Angeles", "San Diego"),
pch=0, bty="n",col=c("blue", "red", "green"),
cex=0.7 )
# add a legend #
# the `lwd=` argument controls how thick the lines are
legend("topleft", c("Total US", "Los Angeles", "San Diego"),
pch=22, bty="n",col=c("blue", "red", "green"),
cex=0.7 )
# add a legend #
# the `lwd=` argument controls how thick the lines are
legend("topleft", c("Total US", "Los Angeles", "San Diego"),
pch=15, bty="n",col=c("blue", "red", "green"),
cex=0.7 )
# in ggplot2, you get boxplots using `geom_boxplot` #
avocado %>%
ggplot( aes(type, AveragePrice ) ) +
geom_boxplot()
# its a;
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, col=factor(region) ) ) + geom_boxplot()
# in ggplot2, you get boxplots using `geom_boxplot` #
avocado %>%
ggplot( aes(AveragePrice) ) +
geom_boxplot()
# in ggplot2, you get boxplots using `geom_boxplot` #
avocado %>%
ggplot( aes(AveragePrice, AveragePrice) ) +
geom_boxplot()
avocado %>%
ggplot( aes(type, AveragePrice) ) +
geom_boxplot() +
coord_flip()
# or we can grouped bars if we set `position='dodge'` in `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( position='dodge', stat='identity', aes( fill=factor(region) ) ) +
coord_flip()
?barplot
# `beside=TRUE` gets you the grouped aesthetic #
barplot( counts.grp, col=c("red","blue", "green"),
legend = rownames(counts.grp), beside=TRUE,
horiz = T)
# in ggplot2, you get boxplots using `geom_boxplot` #
avocado %>%
ggplot( aes(x="", y=AveragePrice) ) +
geom_boxplot()
# in ggplot2, you get boxplots using `geom_boxplot` #
avocado %>%
ggplot( aes(x=" ", y=AveragePrice) ) +
geom_boxplot()
# can even do a horizontal boxplot by adding `coord_flip()` like with barcharts #
avocado %>%
ggplot( aes(type, AveragePrice) ) +
geom_boxplot() +
coord_flip()
# and it's a snap to do grouped boxplots wehn you do #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, col=factor(region) ) ) + geom_boxplot()
# in ggplot2, ggplot() acts as the call that we want to graph #
# aes() within ggplot() tells the plot the aesthetics -- here, what data to plot #
# adding geom_SOMETHING() at the end tells ggplot what type of plot to make #
# + geom_point() gets us a scatter (point) plot #
avocado %>%
ggplot( aes(`Total Volume`, AveragePrice) ) +
geom_point()
# and we can rename our axes, or even add a main title, by adding `labs()`, `xlab()`, and `ylab()` #
avocado %>%
ggplot( aes(`Total Volume`, AveragePrice) ) +
geom_point() +
labs(title = "Avocados") +
xlab("Total Volume") + ylab("Average Price ($)")
# we can add titles and change axis labels by using the `main=`, `xlab=`, and `ylab=` arugments #
plot( avocado$`Total Volume`, avocado$AveragePrice,
main="Avocados",
xlab="Total Volume", ylab="Average Price ($)")
# there's actually a `type` argument in the plot() function that tells R what type of plot to make #
# the default for type is "p", which stands for "point #
# to make a line plot we need to set it to "l" for line #
plot( ChickWeight$Time, ChickWeight$weight, type="l")
# To get different lines by chick, we plot one chick's data in the plot first, then we add more #
# lines using the `lines()` function for the other chicks we want #
plot(ChickWeight[which(ChickWeight$Chick==1), "Time"],
ChickWeight[which(ChickWeight$Chick==1),"weight"],
type="l")
lines(ChickWeight[which(ChickWeight$Chick==5), "Time"],
ChickWeight[which(ChickWeight$Chick==5),"weight"])
lines(ChickWeight[which(ChickWeight$Chick==27), "Time"],
ChickWeight[which(ChickWeight$Chick==27),"weight"])
# in ggplot, using `+ geom_line()` instead of `+ geom_point()` will get us a line graph #
ChickWeight %>%
ggplot( aes(Time, weight) ) +
geom_line()
# there's actually a `type` argument in the plot() function that tells R what type of plot to make #
# the default for type is "p", which stands for "point #
# to make a line plot we need to set it to "l" for line #
plot( ChickWeight$Time, ChickWeight$weight, type="l")
# We can make different lines by chick if we `filter()` the data before before sending #
# it to `ggplot()`. We can also give the lines different colors by using the `color` #
# argument within `aes()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, color=factor(Chick)) ) +
geom_line()
# We can make different lines by chick if we `filter()` the data before before sending #
# it to `ggplot()`. We can also give the lines different colors by using the `color` #
# argument within `aes()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight) ) +
geom_line()
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, color=factor(Chick)) ) +
geom_line() +
scale_fill_manual(values=c("blue", "#E69F00", "#56B4E9"))
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, color=factor(Chick)) ) +
geom_line( color=c("red", "blue", "green") )
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, color=factor(Chick)) ) +
geom_line( color=c("red") )
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, color=factor(Chick)) ) +
geom_line( color=c("red") )
# We can make different lines by chick if we `filter()` the data before before sending #
# it to `ggplot()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line()
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( color=c("red", "blue", "green") )
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( color=factor(Chick) )
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( caes(olor=factor(Chick)) )
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(olor=factor(Chick)) )
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(color=factor(Chick)) )
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(color=factor(Chick)) ) +
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
# if you want the chicks to be specific colors you can add `scale_fill_manual()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(color=factor(Chick)) ) +
scale_color_manual(values=c("red", "blue", "green"))
# that's also an ugly legend title so we'll change it by adding `guides()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(color=factor(Chick)) ) +
scale_color_manual(values=c("red", "blue", "green")) +
guides( fill=guide_legend(title="Chick") )
d
# that's also an ugly legend title so we'll change it by adding `guides()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(color=factor(Chick)) ) +
scale_color_manual(values=c("red", "blue", "green")) +
labs(fill="Chick")
# that's also an ugly legend title so we'll change it by adding `guides()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(color=factor(Chick)) ) +
scale_fill_manual(values=c("red", "blue", "green")) +
labs(fill="Chick")
# that's also an ugly legend title so we'll change it by adding `guides()` #
ChickWeight %>%
filter( Chick %in% c(1, 5, 27) ) %>%
ggplot( aes(Time, weight, group=factor(Chick)) ) +
geom_line( aes(color=factor(Chick)) ) +
scale_color_manual("Chick", values=c("red", "blue", "green")) +
labs(fill="Chick")
legend("topleft", legend = c("Chick 1", "Chick 5", "Chick 27"),
lty=1, bty="n", col=c("red", "blue", "green") )
plot(ChickWeight[which(ChickWeight$Chick==1), "Time"],
ChickWeight[which(ChickWeight$Chick==1),"weight"],
type="l", col="red")
lines(ChickWeight[which(ChickWeight$Chick==5), "Time"],
ChickWeight[which(ChickWeight$Chick==5),"weight"], col="blue")
lines(ChickWeight[which(ChickWeight$Chick==27), "Time"],
ChickWeight[which(ChickWeight$Chick==27),"weight"], col="green")
legend("topleft", legend = c("Chick 1", "Chick 5", "Chick 27"),
lty=1, bty="n", col=c("red", "blue", "green") )
plot(ChickWeight[which(ChickWeight$Chick==1), "Time"],
ChickWeight[which(ChickWeight$Chick==1),"weight"],
type="l", col="red",
xlab="Weight", ylab="Time")
lines(ChickWeight[which(ChickWeight$Chick==5), "Time"],
ChickWeight[which(ChickWeight$Chick==5),"weight"], col="blue")
lines(ChickWeight[which(ChickWeight$Chick==27), "Time"],
ChickWeight[which(ChickWeight$Chick==27),"weight"], col="green")
legend("topleft", legend = c("Chick 1", "Chick 5", "Chick 27"),
lty=1, bty="n", col=c("red", "blue", "green") )
# if you don't specify colors it will just be grayscale #
# `barplot()` also comes with a `legend` argument to create a legend #
barplot( counts.grp,  col=c("red","blue", "green"),
legend = rownames(counts.grp) )
# `horiz=TRUE` will get you a horizontal barchart #
barplot( counts.grp, col=c("red","blue", "green"),
legend = rownames(counts.grp),
beside=TRUE,
horiz=TRUE )
## In ggplot, we can just plug in the data as it exists ##
avocado %>%
ggplot( aes(type, `Total Bags`)) +
geom_bar( stat='identity' )
## In ggplot, we can just plug in the data as it exists ##
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type)) +
geom_bar( stat='identity' )
barplot( counts.av )
# we can color the bars by type #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type)) +
geom_bar( stat='identity' )
# we can color the bars by type #
barplot( counts.av, color=c("red", "blue"))
?barplot
# we can color the bars by type #
barplot( counts.av, col=c("red", "blue"))
# we can color the bars by type #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type)) +
geom_bar( stat='identity' )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type)) +
geom_bar( stat='identity' ) +
scale_fill_manual( values=c("red", "blue") ) +
# We can get stacked bars by using the `col=` argument in the `aes()` of `ggplot()` and #
# `fill=` in the `aes()` of `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( stat='identity', aes( fill=factor(region) ) )
# we can color the bars by type #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type)) +
geom_bar( stat='identity' )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=c("red", "blue"))) +
geom_bar( stat='identity' ) +
scale_fill_manual( values=c("red", "blue") ) +
# We can get stacked bars by using the `col=` argument in the `aes()` of `ggplot()` and #
# `fill=` in the `aes()` of `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( stat='identity', aes( fill=factor(region) ) )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=c("red", "blue"))) +
geom_bar( stat='identity' ) #+
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity' ) +
scale_fill_manual( values=c("red", "blue") ) +
# We can get stacked bars by using the `col=` argument in the `aes()` of `ggplot()` and #
# `fill=` in the `aes()` of `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( stat='identity', aes( fill=factor(region) ) )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity' ) +
scale_color_manual( values=c("red", "blue") ) +
# We can get stacked bars by using the `col=` argument in the `aes()` of `ggplot()` and #
# `fill=` in the `aes()` of `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( stat='identity', aes( fill=factor(region) ) )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity' ) #+
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity', color=c("red", "blue") ) #+
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity', color=type ) #+
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity', aes(color=type) ) #+
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity', aes(color=type) ) +
scale_color_manual( values=c("red", "blue") ) +
# We can get stacked bars by using the `col=` argument in the `aes()` of `ggplot()` and #
# `fill=` in the `aes()` of `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( stat='identity', aes( fill=factor(region) ) )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity', aes(color=type, fill=type) ) +
scale_color_manual( values=c("red", "blue") ) +
# We can get stacked bars by using the `col=` argument in the `aes()` of `ggplot()` and #
# `fill=` in the `aes()` of `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( stat='identity', aes( fill=factor(region) ) )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity' ) +
scale_color_manual( values=c("red", "blue") ) +
# We can get stacked bars by using the `col=` argument in the `aes()` of `ggplot()` and #
# `fill=` in the `aes()` of `geom_bar` #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, `Total Bags`, col=factor(region) ) ) +
geom_bar( stat='identity', aes( fill=factor(region) ) )
# we can specify our own colors by adding `scale_fill_manual()` #
avocado %>%
ggplot( aes(type, `Total Bags`, fill=type) ) +
geom_bar( stat='identity', aes(color=type, fill=type) ) +
scale_color_manual( values=c("red", "blue") )
# and it's a snap to do grouped boxplots when you color by factored region #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, col=factor(region) ) ) + geom_boxplot()
# and it's a snap to do grouped boxplots when you color by factored region #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, group=factor(region) ) ) +
geom_boxplot()
# and it's a snap to do grouped boxplots when you color by factored region #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, col=factor(region) ) ) +
geom_boxplot()
# and it's a snap to do grouped boxplots when you color by factored region #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot()
#### THEMES ####
# You can also apply pre-set color schemes to you ggplots by using themes: #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_gray()
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_bw()
#### THEMES ####
# You can also apply pre-set color schemes to you ggplots by using themes: #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_classic()
# and it's a snap to do grouped boxplots when you color by factored region #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot()
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_bw()
# bw theme gives you white background and gray lines #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_void()
# void theme takes pretty much everything away #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_dark()
# void theme takes pretty much everything away #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_linedraw()
# void theme takes pretty much everything away #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_minimal()
# void theme takes pretty much everything away #
avocado %>%
filter( region %in% c("TotalUS", "LosAngeles", "SanDiego") ) %>%
ggplot( aes(type, AveragePrice, fill=factor(region) ) ) +
geom_boxplot() +
theme_test()
install.packages( 'ggmap' )
install.packages( 'maps' )
install.packages( 'mapdata' )
library(ggmap)
library(maps)
library(mapdata)
#### MAPS ####
usa <- map_data("usa") # we already did this, but we can do it again
ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
?map_data
# create our map using `geom_polygon` #
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group)) #+
?coord_fixed
# we can add some points to the map and connect them #
usa %>%
ggplot() +
geom_polygon( aes(x=long, y = lat) ) +
geom_point( data = labs, aes(x = long, y = lat), color = "black", size = 5 ) +
geom_point( data = labs, aes(x = long, y = lat), color = "yellow", size = 4 ) +
coord_fixed(1.3)
# we can add some points to the map and connect them #
labs <- data.frame(
long = c(-122.064873, -122.306417),
lat = c(36.951968, 47.644855),
stringsAsFactors = FALSE
)
usa %>%
ggplot() +
geom_polygon( aes(x=long, y = lat) ) +
geom_point( data = labs, aes(x = long, y = lat), color = "black", size = 5 ) +
geom_point( data = labs, aes(x = long, y = lat), color = "yellow", size = 4 ) +
coord_fixed(1.3)
usa %>%
ggplot() +
geom_polygon( aes(x=long, y = lat, group=group) ) +
geom_point( data = labs, aes(x = long, y = lat), color = "black", size = 5 ) +
geom_point( data = labs, aes(x = long, y = lat), color = "yellow", size = 4 ) +
coord_fixed(1.3)
# and we can do a map with states !
states <- map_data("state")
states %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
# `color=white` will get us white state borders #
# `guides(fill=FALSE)` will block
states %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") #+
# and here we get some specific states #
west_coast <- subset(states, region %in% c("california", "oregon", "washington"))
west_cost %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "violet", color = "white") +
coord_fixed(1.3)
west_coast %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "violet", color = "white") +
coord_fixed(1.3)
head(usa)
?map_data
?maps
